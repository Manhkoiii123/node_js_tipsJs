"use strict";

const shopModel = require("../models/shop.model");
const crypto = require("crypto");
const bcrypt = require("bcrypt");
const KeyTokenServices = require("./keyToken.service");
const { createTokenPair, verifyJWT } = require("../auth/authUtils");
const { getInfoData } = require("../utils");
const {
  BadRequestError,
  AuthFailureError,
  ForbiddenError,
} = require("../core/error.response");
const { findByEmail } = require("./shop.service");
const RoleShop = {
  SHOP: "SHOP",
  //WRITER:'00001', // n√™n ƒë·ªÉ th·∫ø n√†y n·∫øu vi·∫øt r√µ th√¨ ngta bi·∫øt m·∫•t
  WRITER: "WRITER", //h·ªçc th√¨ vi·∫øt th·∫ø n√†y
  EDITOR: "EDITOR",
  ADMIN: "ADMIN",
};
class AccessService {
  /* 
    1. check email
    2. check password
    3. create accToken,refToken
    4. generate token 
    5. getData retrun login
  */
  // c√°i refTOken n√†y ƒë·ªÉ m√† khi fe call api login l·∫°i m√† c√≥ login l·∫°i b·∫£o c√°c ae fe mang c√°i cookie theo => b·∫£o r·∫±ng l√† th·∫±ng n√†y tr∆∞·ªõc ƒë√£ login r·ªìi => mang l√™n x√≥a c√°i cookie ƒë√≥ ƒëi
  static login = async ({ email, password, refreshToken = null }) => {
    const foundShop = await findByEmail({ email });
    if (!foundShop) {
      throw new BadRequestError("Shop not registered");
    }
    //ki·ªÉm tra pass
    const match = bcrypt.compare(password, foundShop.password);
    if (!match) {
      throw new AuthFailureError("Authentication error");
    }
    //t·∫°o token
    const privateKey = crypto.randomBytes(64).toString("hex");
    const publicKey = crypto.randomBytes(64).toString("hex");

    const tokens = await createTokenPair(
      {
        userId: foundShop._id,
        email,
      },
      publicKey,
      privateKey
    );

    await KeyTokenServices.createKeyToken({
      userId: foundShop._id,
      refreshToken: tokens.refreshToken,
      publicKey,
      privateKey,
    });
    return {
      shop: getInfoData({
        fields: ["_id", "name", "email"],
        object: foundShop,
      }),
      tokens,
    };
  };

  static signUp = async ({ name, email, password }) => {
    // try {
    //step 1 check emial t·ªìn t·∫°i ko
    const holderShop = await shopModel.findOne({ email }).lean(); //lean gi√∫p ta query nhanh
    // n·∫øu ko c√≥ lean th√¨ n√≥ return cho ta 1 obj c·ªßa mongoose ch·ª©a r·∫•t nheiefu tt th·ª´a
    // c√≥ th√¨ s·∫Ω gi·∫£m ƒë∆∞·ª£c size c·ªßa obj (tr·∫£ v·ªÅ obj js thu·∫ßn t√∫y)
    if (holderShop) {
      throw new BadRequestError("Error: Shop already registered");
    }
    const passwordHash = await bcrypt.hash(password, 10); // n√™n ƒë·ªÉ 10 n·∫øu ƒë·ªÉ nhi·ªÅu th√¨ t·ªët h∆°n nhuwg t·ªën h∆°n

    const newShop = await shopModel.create({
      name,
      email,
      password: passwordHash,
      roles: [RoleShop.SHOP],
    });

    if (newShop) {
      const privateKey = crypto.randomBytes(64).toString("hex");
      const publicKey = crypto.randomBytes(64).toString("hex");
      const keyStore = await KeyTokenServices.createKeyToken({
        userId: newShop._id,
        publicKey,
        privateKey,
      });

      if (!keyStore) {
        throw new BadRequestError("Error: Key store error");
      }
      // const publicKeyObject = createPublicKey(publicKeyString);
      // t·∫°o ra 1 c·∫∑p token
      const tokens = await createTokenPair(
        { userId: newShop._id, email },
        publicKey,
        privateKey
      );

      return {
        shop: getInfoData({
          fields: ["_id", "name", "email"],
          object: newShop,
        }),
        tokens,
      };
    }
    return {
      code: 200,
      metadata: null,
    };
  };
  static logout = async (keyStore) => {
    const delKey = await KeyTokenServices.removeKeyById(keyStore._id);
    return delKey;
  };

  static handleRefreshToken = async (refreshToken) => {
    //check token ƒë√£ s·ª≠ d·ª•ng ch∆∞a (trong model keyToken c√≥ refTokenUsed)
    const foundKey = await KeyTokenServices.findByRefreshTokenUsed(
      refreshToken
    );
    // n·∫øu m√† th·∫•y => ƒë∆∞a v√≤a danh s√°ch nghi v·∫•n
    //n·∫øu m√† ch th·∫•y th√¨ c·∫•p l·∫°i acctoken m·ªõi
    if (foundKey) {
      //decode xem m√†y l√† th·∫±ng n√†o c√≥ trong h·ªá th·ªëng ko
      // quay sang vi·∫øt c√°i verify trogn authUtils
      const { userId, email } = await verifyJWT(
        refreshToken,
        foundKey.privateKey
      );
      console.log("{ userId, email } [1] ::: ", { userId, email });
      // x√≥a tr∆∞·ªõc ƒë√£
      // sang c√°i key service vi·∫øt c√°i delete key
      await KeyTokenServices.deleteKeyById(userId);
      throw new ForbiddenError("Something wrong happend! Please relogin");
    }
    //ch∆∞a c√≥
    const holderToken = await KeyTokenServices.findByRefreshToken(refreshToken);
    if (!holderToken) throw new AuthFailureError("Shop not registed 1");
    //verify token n√†y
    const { userId, email } = await verifyJWT(
      refreshToken,
      holderToken.privateKey
    );
    console.log("{ userId, email } [2] ::: ", { userId, email });
    //check user n√†y c√≥ ƒë√∫ng ko
    const foundShop = await findByEmail({ email });
    if (!foundShop) throw new AuthFailureError("Shop not registed 2");
    // c·∫•p token m·ªõi v√† ƒë∆∞a v√†o ref v√†o c√°i ƒë√£ s·ª≠ d·ª•ng
    const tokens = await createTokenPair(
      {
        userId,
        email,
      },
      holderToken.publicKey,
      holderToken.privateKey
    );

    //update token
    await holderToken.updateOne({
      $set: {
        refreshToken: tokens.refreshToken,
      },
      $addToSet: {
        refreshTokensUsed: refreshToken, // ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
      },
    });
    return {
      user: { userId, email },
      tokens,
    };
  };
  static handleRefreshToken2 = async ({ keyStore, user, refreshToken }) => {
    // console.log("üöÄ ~ handleRefreshToken2= ~ keyStore:", {
    //   keyStore,
    //   user,
    //   refreshToken,
    // });
    const { userId, email } = user;
    if (keyStore.refreshTokensUsed.includes(refreshToken)) {
      await KeyTokenServices.deleteKeyById(userId);
      throw new ForbiddenError("Something wrong happend! Please relogin");
    }

    if (keyStore.refreshToken !== refreshToken) {
      // c√°i key.ref l√† c√°i ƒëang d√πng h·ª£p l·ªá c√≤n c√°i ref c√≤n l·∫°i l√† ng∆∞·ªùi d√πng ƒë∆∞a l√™n
      throw new AuthFailureError("Shop not registed ");
    }
    //n·∫øu ƒë√∫ng token
    const foundShop = await findByEmail({ email });
    if (!foundShop) throw new AuthFailureError("Shop not registed");
    const tokens = await createTokenPair(
      {
        userId,
        email,
      },
      keyStore.publicKey,
      keyStore.privateKey
    );

    //update token
    await keyStore.updateOne({
      $set: {
        refreshToken: tokens.refreshToken,
      },
      $addToSet: {
        refreshTokensUsed: refreshToken, // ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
      },
    });
    return {
      user,
      tokens,
    };
  };
}
module.exports = AccessService;
